services:
  sterling_gazebo_s:
    image: sterling_gazebo_i
    container_name: sterling_gazebo_c
    build:
      # set the build context to the directory containing build files
      context: ..
      dockerfile: docker/Dockerfile
    # use the nvidia runtime for GPU access
    # runtime: nvidia
    environment:
      # pass the display variable to the container
      - DISPLAY=${DISPLAY}
      # enable NVIDIA GPU access inside the container
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
      # Set environment variables for GPU rendering
      - __NV_PRIME_RENDER_OFFLOAD=1
      - __GLX_VENDOR_LIBRARY_NAME=nvidia
      # disable qt-X11 memory sharing for RViz
      - QT_X11_NO_MITSHM=1
      # ROS2 multicast
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
    security_opt:
    # this is set bc of errors with RViz being denied dbus comm w/ host
      - apparmor:unconfined
    volumes:
      # mount host directories to the container for persistent storage
      - ../sterling:/root/ros2_ws/src/sterling
      # mount the X11 socket to enable graphics display
      - /tmp/.X11-unix:/tmp/.X11-unix
      # for non-nvidia users
      - /dev/dri:/dev/dri
      # optionally, add the .Xauthority file to use ssh X11 forwarding
      - ${HOME}/.Xauthority:/root/.Xauthority:rw
    # give the container access to the host's network
    network_mode: host
    # enable stdin and tty to allow the user to run bash interactively
    stdin_open: true
    tty: true
    # add devices to the container
    # devices:
    #   - /dev/hokuyo:/dev/hokuyo
    #   - /dev/input/js0:/dev/input/js0
    # run the entrypoint script and pass the UID and GID of the host user
    entrypoint: /usr/bin/entrypoint.sh -u "$UID_GID" -n "$UNAME"
